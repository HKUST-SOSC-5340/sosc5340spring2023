population <- rbeta (100000, 1, 2)
plot (density (population))
# population mean
mean(population)
# population variance
var(population)
population <- rbeta (100000, 1, 2)
plot (density (population))
# population mean
mean(population)
# population variance
var(population)
survey = sample(population, size = 1000)
plot (density (survey))
# sample mean as estimator of population mean
est.mean = mean(survey)
# unbiased estimator of population variance
est.var = 1000/(1000-1) * var(survey)
survey = sample(population, size = 1000)
plot (density (survey))
# sample mean as estimator of population mean
est.mean = mean(survey)
# unbiased estimator of population variance
est.var = 1000/(1000-1) * var(survey)
est.var
survey_times <- seq(100, 100000, 500)
survey_times
survey_mean_list  <- c()
survey_times <- seq(100, 100000, 500)
for (n in survey_times ){
survey <- sample(population, size = n, replace = F)
survey_mean_list  <- c(survey_mean_list , mean(survey))
}
plot(survey_times, survey_mean_list , xlab = "number of samples", ylab = "sample mean")
abline(h = mean(population), col = "red")
n = 10
survey_mean_list <- c()
for (m in 1:n)
{
survey <- sample(population, size = 1000, replace = TRUE)
survey_mean_list <- c(survey_mean_list, mean(survey))
}
survey_mean_list
n = 10000
survey_mean_list <- c()
for (m in 1:n)
{
survey <- sample(population, size = 1000, replace = TRUE)
survey_mean_list <- c(survey_mean_list, mean(survey))
}
# Now we show the central limit theorem
survey_times <- c(10,  10000)
col <- c("red",  "blue") #"green",
i = 1
for (n in survey_times ){
print (n)
# central limit theorem talks about distribution of the sample mean
# we cannot calculate the distribution for a single survey, so we draw sample multiple times
survey_mean_list <- c()
for (m in 1:n)
{
survey <- sample(population, size = 1000, replace = TRUE)
survey_mean_list <- c(survey_mean_list, mean(survey))
}
# sample_mean_list_standard <- survey_mean_list  - mean(population)
plot(density (survey_mean_list),  col = col[i], xlim = c(0.3, 0.38), ylim  = c(0,60), xlab = "")
abline(v = mean(population), col = "black")
par(new = T)
i = i  + 1
}
sample_mean = mean(sample)
sample_mean = mean(survey)
sample_mean = mean(survey)
#standard error of the sample mean
ss = sqrt(est.var/1000)
print ("point estimate of mean")
print (sample_mean)
print ("95% normal-approximated confidence interval of mean")
c(sample_mean - 1.96 * ss, sample_mean + 1.96 * ss)
length(survey)
length(sample)
length(survey)
print (length(sample))
bootstrap_means = c() # store bootstrapped means
for (i in 1:100){
# resample from the sample with replacement
boot_data <- sample(survey, length(survey), replace = T)
boot_mean <- mean(boot_data)
bootstrap_means <- c(bootstrap_means, boot_mean)
}
bootstrap_means
print (mean(bootstrap_means))
print (sample_mean)
print ("normal confidence interval")
print (c(sample_mean - 1.96 * ss, sample_mean + 1.96 * ss))
plot(density(bootstrap_means), main = "confidence interval")
print (length(sample))
bootstrap_means = c() # store bootstrapped means
for (i in 1:100){
# resample from the sample with replacement
boot_data <- sample(survey, length(survey), replace = T)
boot_mean <- mean(boot_data)
bootstrap_means <- c(bootstrap_means, boot_mean)
}
# then simple quantile function to
print ("point estimate of mean")
print (sample_mean)
print ("point estimate of mean")
print (mean(bootstrap_means))
print ("normal confidence interval")
print (c(sample_mean - 1.96 * ss, sample_mean + 1.96 * ss))
print ("95% bootstrap confidence interval of mean")
conf = quantile(bootstrap_means, c(0.025, 0.975))
print (conf)
plot(density(bootstrap_means), main = "confidence interval")
abline(v = conf[1], col = "red")
abline(v = conf[2], col = "red")
abline(v = sample_mean - 1.96 * ss, col = "green")
abline(v = sample_mean + 1.96 * ss, col = "green")
print (length(sample))
bootstrap_means = c() # store bootstrapped means
for (i in 1:100){
# resample from the sample with replacement
boot_data <- sample(survey, length(survey), replace = T)
boot_mean <- mean(boot_data)
bootstrap_means <- c(bootstrap_means, boot_mean)
}
# then simple quantile function to
print ("point estimate of mean")
print (sample_mean)
print ("point estimate of mean")
print (mean(bootstrap_means))
print ("normal confidence interval")
print (c(sample_mean - 1.96 * ss, sample_mean + 1.96 * ss))
print ("95% bootstrap confidence interval of mean")
conf = quantile(bootstrap_means, c(0.025, 0.975))
print (conf)
plot(density(bootstrap_means), main = "confidence interval")
abline(v = conf[1], col = "red")
abline(v = conf[2], col = "red")
abline(v = sample_mean - 1.96 * ss, col = "green")
abline(v = sample_mean + 1.96 * ss, col = "green")
print (length(sample))
bootstrap_means = c() # store bootstrapped means
for (i in 1:1000){
# resample from the sample with replacement
boot_data <- sample(survey, length(survey), replace = T)
boot_mean <- mean(boot_data)
bootstrap_means <- c(bootstrap_means, boot_mean)
}
# then simple quantile function to
print ("point estimate of mean")
print (sample_mean)
print ("point estimate of mean")
print (mean(bootstrap_means))
print ("normal confidence interval")
print (c(sample_mean - 1.96 * ss, sample_mean + 1.96 * ss))
print ("95% bootstrap confidence interval of mean")
conf = quantile(bootstrap_means, c(0.025, 0.975))
print (conf)
plot(density(bootstrap_means), main = "confidence interval")
abline(v = conf[1], col = "red")
abline(v = conf[2], col = "red")
abline(v = sample_mean - 1.96 * ss, col = "green")
abline(v = sample_mean + 1.96 * ss, col = "green")
